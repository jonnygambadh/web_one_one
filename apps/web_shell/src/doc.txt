help me to create a google doc for listing the findings of the following jira ticket:
```
POC: [New Web Shell] Write the new web shell skeleton

we need to write a skeleton for the new web shell that supports this

AC :

Module federation
Are we able to make this web shell UI headless (load header or nav as plugin)
Are we able to load Angular as a web component
Are we able to load any old VP plugin
What is the effort needed for backward compatibility.
How the SDK compatibility layer will look like (is it hacked, what is needed for this layer)
How we will handle routing (nested routing inside the Angular web component features)
```

this is the info:
I was able to:

- create a generic new headlessui shell using react 17
- succesfully load a new federated plugin I called sidebar detached from the shell.
- successfully convert a small existing plugin (Ratings and Review) into module federation,
- succesfully integrate the ratings and review module to new shell
- elaborate a proof of concept using Sentry to create a transaction with two spans, the time it took for the plugin to be ready from the moment the shell call it and the time it took for the plugin once it's ready to load its main component



This POC shed some light on the effort it can take to migrate current plugins to module federation (it was not that difficult) and how we can use Sentry
to measure loading times.

I mocked a small portion of the SDK (only the methods ratings and reviews plugin depends on shell), it looks like this:

```
import React, { createContext, useContext } from "react";

type SdkContextType = {
  getPlatform: () => string;
  pushGA4Event: (eventName: string, data: any) => void;
  t: (translation: string) => string;
  getLocale: () => string;
  pushGtmEventV2: (eventName: string, data: any) => void;
  createGlobalApi: () => {
    fetch: (url: string) => Promise<typeof reviews | typeof ratings>;
  };
};

const ratings = {
  avg_ratings: [
    {
      global_vendor_code: "FP_SG;v0zn",
      max_allowed_rating: 5,
      avg_rating: 3.7,
      ratings: [
        {
          rating: 1,
          percentage: 8.96861,
        },
        {
          rating: 2,
          percentage: 3.5874438,
        },
        {
          rating: 3,
          percentage: 6.278027,
        },
        {
          rating: 4,
          percentage: 11.659193,
        },
        {
          rating: 5,
          percentage: 69.50673,
        },
      ],
      topic_ratings: [],
    },
  ],
};

const reviews = {
  reviews: [
    {
      id: "363e99e6-7499-21ec-90d6-0442ac123565f",
      orderId: "v0zn-w2t2",
      globalVendorCode: "FP_SG;v0zn",
      date: "2023-06-28T12:30:54Z",
      rating: 1,
      text: "Test: yagmur - 1 star",
      reply: null,
      isAutoGenerated: false,
    },
    {
      id: "363e99e6-7499-25ec-90d6-0442ac123565f",
      orderId: "v0zn-1234",
      globalVendorCode: "FP_SG;v0zn",
      date: "2023-06-28T11:33:51Z",
      rating: 5,
      text: "Vova",
      reply: null,
      isAutoGenerated: false,
    },
    {
      id: "363e99e6-7499-24ec-90d6-0442ac123565f",
      orderId: "v0zn-56ve",
      globalVendorCode: "FP_SG;v0zn",
      date: "2023-06-28T11:33:51Z",
      rating: 8,
      text: "Test: yagmur  whats happened- max score  is 5, avg score is 8",
      reply: null,
      isAutoGenerated: false,
    },
    {
      id: "363e99e6-7499-23ec-90d6-0442ac123565f",
      orderId: "v0zn-il6j",
      globalVendorCode: "FP_SG;v0zn",
      date: "2023-06-28T11:33:51Z",
      rating: 1,
      text: "Test: yagmur  - max score  is 10, avg score is 2",
      reply: null,
      isAutoGenerated: false,
    },
    {
      id: "363e99e6-7499-22ec-90d6-0442ac123565f",
      orderId: "v0zn-s0yo",
      globalVendorCode: "FP_SG;v0zn",
      date: "2023-06-28T11:33:51Z",
      rating: 1,
      text: "Test: yagmur  - max score  is 10, avg score is 1",
      reply: null,
      isAutoGenerated: false,
    },
  ],
  maxRating: 5,
  hasNext: true,
  hasPrevious: false,
};
const SdkContext = createContext<SdkContextType | undefined>(undefined);

export const SdkProvider = ({ children }: { children: React.ReactNode }) => {
  const sdk = {
    getPlatform: () => "Pandora",
    pushGA4Event: (eventName: string, data: any) => {
      console.log("eventName: ", eventName);
      console.log("data: ", data);
    },
    pushGtmEventV2: (eventName: string, data: any) => {
      console.log("eventName: ", eventName);
      console.log("data: ", data);
    },
    getLocale: () => "en",
    t: (translation: string) => `translated ${translation}`,
    createGlobalApi: () => {
      return {
        fetch: (url: string) => {
          if (url === "https://vrs-api.eu.stg.portal.restaurant/v1/reviews") {
            return Promise.resolve(reviews);
          } else if (
            url === "https://vrs-api.eu.stg.portal.restaurant/v1/ratings"
          ) {
            return Promise.resolve(ratings);
          } else {
            throw new Error(`Unexpected URL: ${url}`);
          }
        },
      };
    },
  };

  return <SdkContext.Provider value={sdk}>{children}</SdkContext.Provider>;
};

export const useSdk = (): SdkContextType => {
  const context = useContext(SdkContext);

  if (!context) {
    throw new Error("useSdk must be used within a SdkProvider");
  }

  return context;
};
```

Also this POC helped to identify the next step:

- we need to convert another plugin which uses react router (module federation demands that plugins use memory history instead of browser history)


Things we need to figure out:
- how much effort it will require to convert a big module to module federation
- how much effort it will require to upgrade a big module to react 18 (including the upgrade to react-router-6 (not all plugins uses react-router))
